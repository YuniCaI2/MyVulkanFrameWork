#version 450
layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(binding = 0) uniform sampler2D equirectangularMap;
layout(binding = 1, rgba32f) uniform imageCube cubemap;
layout(binding = 2, rgba32f) uniform imageCube diffuseLightImage;

layout(push_constant) uniform PushConstants {
    vec2 size;
} rawImageInfo;

const float PI = 3.14159265359;

vec3 uvToDirection(vec2 uv, uint face) {
    vec2 coord = uv * 2.0 - 1.0; // [0,1] -> [-1,1]
    vec3 dir;
    if (face == 0) dir = vec3(1.0, -coord.y, -coord.x);  // +X
    else if (face == 1) dir = vec3(-1.0, -coord.y, coord.x); // -X
    else if (face == 2) dir = vec3(coord.x, 1.0, coord.y);   // +Y
    else if (face == 3) dir = vec3(coord.x, -1.0, -coord.y); // -Y
    else if (face == 4) dir = vec3(coord.x, -coord.y, 1.0);  // +Z
    else dir = vec3(-coord.x, -coord.y, -1.0);               // -Z
    return normalize(dir);
}

vec2 directionToEquiUV(vec3 dir) {
    float theta = atan(dir.z, dir.x);
    float phi = -asin(dir.y);
    return vec2((theta / (2.0 * PI)) + 0.5, (phi / PI) + 0.5);
}

void main() {
    const float kernel[81] = float[](
    0.000007, 0.000057, 0.000254, 0.000635, 0.000935, 0.000935, 0.000635, 0.000254, 0.000057,
    0.000057, 0.000457, 0.002037, 0.005087, 0.007489, 0.007489, 0.005087, 0.002037, 0.000457,
    0.000254, 0.002037, 0.009079, 0.022658, 0.033333, 0.033333, 0.022658, 0.009079, 0.002037,
    0.000635, 0.005087, 0.022658, 0.056540, 0.083139, 0.083139, 0.056540, 0.022658, 0.005087,
    0.000935, 0.007489, 0.033333, 0.083139, 0.122321, 0.122321, 0.083139, 0.033333, 0.007489,
    0.000935, 0.007489, 0.033333, 0.083139, 0.122321, 0.122321, 0.083139, 0.033333, 0.007489,
    0.000635, 0.005087, 0.022658, 0.056540, 0.083139, 0.083139, 0.056540, 0.022658, 0.005087,
    0.000254, 0.002037, 0.009079, 0.022658, 0.033333, 0.033333, 0.022658, 0.009079, 0.002037,
    0.000057, 0.000457, 0.002037, 0.005087, 0.007489, 0.007489, 0.005087, 0.002037, 0.000457
    );

    ivec2 texel = ivec2(gl_GlobalInvocationID.xy);
    if (texel.x >= 1024 || texel.y >= 1024) return;

    vec2 uv = vec2(texel) / 1024.0;
    uint face = gl_GlobalInvocationID.z;

    vec3 dir = uvToDirection(uv, face);
    vec2 equiUV = directionToEquiUV(dir);
    vec4 color = texture(equirectangularMap, equiUV);
    vec2 pixelPos = vec2(rawImageInfo.size.x * equiUV.x, rawImageInfo.size.y * equiUV.y);
    vec3 blurColor = vec3(0.0, 0.0, 0.0);

    for (int i = 0; i < 9; i++) {
        int tempI = i - 4;
        for (int j = 0; j < 9; j++) {
            int tempJ = j - 4;
            vec2 offsetPos = vec2((pixelPos.x + tempJ) / rawImageInfo.size.x, (pixelPos.y + tempI) / rawImageInfo.size.y);
            blurColor += kernel[i * 9 + j] * texture(equirectangularMap, offsetPos).xyz;
        }
    }

    imageStore(diffuseLightImage, ivec3(texel, face), vec4(blurColor, 1.0));
    imageStore(cubemap, ivec3(texel, face), color);
}